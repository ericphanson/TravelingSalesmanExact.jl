var documenterSearchIndex = {"docs":
[{"location":"#TravelingSalesmanExact.jl","page":"Home","title":"TravelingSalesmanExact.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using TravelingSalesmanExact, GLPK\nset_default_optimizer!(GLPK.Optimizer)\ncities = TravelingSalesmanExact.get_ATT48_cities();\ndistance = TravelingSalesmanExact.ATT;\ntour, cost = get_optimal_tour(cities; distance, verbose=true, slow=true)","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TravelingSalesmanExact]","category":"page"},{"location":"#TravelingSalesmanExact.ATT-Tuple{Any, Any}","page":"Home","title":"TravelingSalesmanExact.ATT","text":"ATT(city1, city2)\n\nThe ATT distance measure as specified in TSPLIB: https://www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/tsp95.pdf.\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.euclidean_distance-Tuple{Any, Any}","page":"Home","title":"TravelingSalesmanExact.euclidean_distance","text":"euclidean_distance(city1, city2)\n\nThe usual Euclidean distance measure.\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.find_cycle","page":"Home","title":"TravelingSalesmanExact.find_cycle","text":"find_cycle(perm_matrix, starting_ind)\n\nReturns the cycle in the permutation described by perm_matrix which includes starting_ind.\n\n\n\n\n\n","category":"function"},{"location":"#TravelingSalesmanExact.get_ATT48_cities-Tuple{}","page":"Home","title":"TravelingSalesmanExact.get_ATT48_cities","text":"get_ATT48_cities() -> Vector{Vector{Int}}\n\nA simple helper function to get the problem data for the ATT48 TSPLIB problem.\n\nExample\n\njulia> using TravelingSalesmanExact, GLPK\n\njulia> cities = TravelingSalesmanExact.get_ATT48_cities()\n48-element Vector{Vector{Int64}}:\n [6734, 1453]\n [2233, 10]\n [5530, 1424]\n [401, 841]\n [3082, 1644]\n [7608, 4458]\n [7573, 3716]\n [7265, 1268]\n [6898, 1885]\n [1112, 2049]\n ⋮\n [6271, 2135]\n [4985, 140]\n [1916, 1569]\n [7280, 4899]\n [7509, 3239]\n [10, 2676]\n [6807, 2993]\n [5185, 3258]\n [3023, 1942]\n\njulia> get_optimal_tour(cities, GLPK.Optimizer, distance = TravelingSalesmanExact.ATT)\n([5, 42, 24, 10, 45, 35, 4, 26, 2, 29  …  30, 36, 46, 33, 20, 47, 21, 32, 39, 48], 10628.0)\n\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.get_cycles-Tuple{Any}","page":"Home","title":"TravelingSalesmanExact.get_cycles","text":"get_cycles(perm_matrix)\n\nReturns a list of cycles from the permutation described by perm_matrix.\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.get_default_optimizer-Tuple{}","page":"Home","title":"TravelingSalesmanExact.get_default_optimizer","text":"get_default_optimizer()\n\nGets the default optimizer, which is set by set_default_optimizer.\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.get_optimal_tour","page":"Home","title":"TravelingSalesmanExact.get_optimal_tour","text":"get_optimal_tour(\n    cities::AbstractVector,\n    optimizer = get_default_optimizer();\n    distance = euclidean_distance,\n    kwargs...\n)\n\nget_optimal_tour(\n    cost::AbstractMatrix\n    optimizer = get_default_optimizer();\n    kwargs...\n)\n\nSolves the travelling salesman problem for a list of cities using JuMP by formulating a MILP using the Dantzig-Fulkerson-Johnson formulation and adaptively adding constraints to disallow non-maximal cycles. Returns an optimal tour and the cost of the optimal path. Optionally specify a distance metric. \n\nThe second argument is mandatory if a default optimizer has not been set (via set_default_optimizer). This argument should be a function which creates an optimizer, e.g.\n\nget_optimal_tour(cities, GLPK.Optimizer)\n\nThere are five boolean optional keyword arguments:\n\nverbose (default: false) indicates whether or not to print lots of information as the algorithm proceeds.\nsymmetric indicates whether or not the cost matrix is symmetric. By default, issymmetric is used to check.\nlazy_constraints indicates whether lazy constraints should be used (which requires a compatible solver).\nslow artifically sleeps after each solve to slow down the output for visualization purposes. Only takes affect if verbose==true.\nsilent_optimizer calls JuMP.set_silent on the resulting model to prevent the optimizer from emitting logging information.\n\nExample\n\njulia> using TravelingSalesmanExact, GLPK, LinearAlgebra\n\njulia> set_default_optimizer!(GLPK.Optimizer)\nGLPK.Optimizer\n\njulia> cities = [[0, 0], [0, 1], [1, 1], [1, 0]]\n4-element Vector{Vector{Int64}}:\n [0, 0]\n [0, 1]\n [1, 1]\n [1, 0]\n\njulia> tour, cost = get_optimal_tour(cities)\n([4, 1, 2, 3], 4.0)\n\njulia> cost_matrix = [norm(cities[i] - cities[j]) for i = 1:4, j = 1:4]\n4×4 Matrix{Float64}:\n 0.0      1.0      1.41421  1.0\n 1.0      0.0      1.0      1.41421\n 1.41421  1.0      0.0      1.0\n 1.0      1.41421  1.0      0.0\n\njulia> tour, cost = get_optimal_tour(cost_matrix)\n([4, 1, 2, 3], 4.0)\n\n\n\n\n\n\n","category":"function"},{"location":"#TravelingSalesmanExact.plot_cities-Tuple{Any}","page":"Home","title":"TravelingSalesmanExact.plot_cities","text":"plot_cities(cities)\n\nUses UnicodePlots's lineplot to make a plot of the tour of the cities in cities, in order (including going from the last city back to the first).\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.plot_tour-Tuple{Any, Any}","page":"Home","title":"TravelingSalesmanExact.plot_tour","text":"show_tour(cities, perm_matrix)\n\nShow a plot of the tour described by perm_matrix of the cities in the vector cities.\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.remove_cycles!-Tuple{Any, Any}","page":"Home","title":"TravelingSalesmanExact.remove_cycles!","text":"remove_cycles!(model, tour_matrix)\n\nFind the (non-maximal-length) cycles in the current solution tour_matrix and add constraints to the JuMP model to disallow them. Returns the number of cycles found.\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.set_default_optimizer!-Tuple{Any}","page":"Home","title":"TravelingSalesmanExact.set_default_optimizer!","text":"set_default_optimizer(O)\n\nSets the default optimizer. For example,\n\nusing GLPK\nset_default_optimizer(GLPK.Optimizer)\n\n\n\n\n\n","category":"method"},{"location":"#TravelingSalesmanExact.simple_parse_tsp-Tuple{Any}","page":"Home","title":"TravelingSalesmanExact.simple_parse_tsp","text":"simple_parse_tsp(filename; verbose = true)\n\nTry to parse the \".tsp\" file given by filename. Very simple implementation just to be able to test the optimization; may break on other files. Returns a list of cities for use in get_optimal_tour.\n\n\n\n\n\n","category":"method"}]
}
